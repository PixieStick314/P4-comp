Map (8, 8) map {
    layer terrain = 0
    procedure {
        let tree = bsp(terrain, 2)
        tree = visit_partitions(tree, create_room)
        terrain = departition(tree)
    }
}

def visit_partitions(tree, function) {
    if (tree.depth > 1) {
        visit_partitions(tree.left, function)
        visit_partitions(tree.right, function)
    }
    else{
    tree.left = function(tree.left)
    tree.right = function(tree.right)
    }
    return tree
}

def create_room(matrix) {
    let tileset = ["#","*","@","&"]
    let tile = random in tileset

    for i in 0..len(matrix) {
        for j in 0..len(matrix[i]) {
            matrix[i][j] = tile
        }
    }

    return matrix
}