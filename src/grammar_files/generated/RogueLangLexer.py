# Generated from C:/Users/Loke/PycharmProjects/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
# Generated from C:/Users/nedim/Documents/GitHub/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,352,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,5,37,274,8,37,10,37,12,37,277,9,37,1,37,1,37,1,38,3,38,282,
        8,38,1,38,4,38,285,8,38,11,38,12,38,286,1,39,3,39,290,8,39,1,39,
        4,39,293,8,39,11,39,12,39,294,1,39,1,39,4,39,299,8,39,11,39,12,39,
        300,1,40,1,40,1,40,5,40,306,8,40,10,40,12,40,309,9,40,1,40,1,40,
        1,41,1,41,1,41,5,41,316,8,41,10,41,12,41,319,9,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
        1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,4,54,347,8,54,
        11,54,12,54,348,1,54,1,54,0,0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,0,105,0,107,0,109,52,1,0,6,2,0,10,10,13,13,2,0,34,34,92,92,3,
        0,65,90,95,95,97,122,5,0,34,34,39,39,92,92,110,110,116,116,2,0,48,
        57,95,95,3,0,9,10,13,13,32,32,359,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,109,1,0,0,0,1,111,
        1,0,0,0,3,117,1,0,0,0,5,121,1,0,0,0,7,125,1,0,0,0,9,129,1,0,0,0,
        11,140,1,0,0,0,13,147,1,0,0,0,15,150,1,0,0,0,17,155,1,0,0,0,19,160,
        1,0,0,0,21,167,1,0,0,0,23,173,1,0,0,0,25,177,1,0,0,0,27,180,1,0,
        0,0,29,186,1,0,0,0,31,190,1,0,0,0,33,196,1,0,0,0,35,206,1,0,0,0,
        37,208,1,0,0,0,39,210,1,0,0,0,41,212,1,0,0,0,43,214,1,0,0,0,45,216,
        1,0,0,0,47,219,1,0,0,0,49,221,1,0,0,0,51,224,1,0,0,0,53,227,1,0,
        0,0,55,230,1,0,0,0,57,233,1,0,0,0,59,236,1,0,0,0,61,238,1,0,0,0,
        63,242,1,0,0,0,65,245,1,0,0,0,67,249,1,0,0,0,69,254,1,0,0,0,71,260,
        1,0,0,0,73,265,1,0,0,0,75,269,1,0,0,0,77,281,1,0,0,0,79,289,1,0,
        0,0,81,302,1,0,0,0,83,312,1,0,0,0,85,320,1,0,0,0,87,322,1,0,0,0,
        89,324,1,0,0,0,91,326,1,0,0,0,93,328,1,0,0,0,95,330,1,0,0,0,97,332,
        1,0,0,0,99,334,1,0,0,0,101,336,1,0,0,0,103,338,1,0,0,0,105,340,1,
        0,0,0,107,343,1,0,0,0,109,346,1,0,0,0,111,112,5,102,0,0,112,113,
        5,105,0,0,113,114,5,101,0,0,114,115,5,108,0,0,115,116,5,100,0,0,
        116,2,1,0,0,0,117,118,5,108,0,0,118,119,5,101,0,0,119,120,5,116,
        0,0,120,4,1,0,0,0,121,122,5,108,0,0,122,123,5,101,0,0,123,124,5,
        110,0,0,124,6,1,0,0,0,125,126,5,112,0,0,126,127,5,111,0,0,127,128,
        5,112,0,0,128,8,1,0,0,0,129,130,5,87,0,0,130,131,5,104,0,0,131,132,
        5,105,0,0,132,133,5,116,0,0,133,134,5,101,0,0,134,135,5,78,0,0,135,
        136,5,111,0,0,136,137,5,105,0,0,137,138,5,115,0,0,138,139,5,101,
        0,0,139,10,1,0,0,0,140,141,5,114,0,0,141,142,5,97,0,0,142,143,5,
        110,0,0,143,144,5,100,0,0,144,145,5,111,0,0,145,146,5,109,0,0,146,
        12,1,0,0,0,147,148,5,105,0,0,148,149,5,102,0,0,149,14,1,0,0,0,150,
        151,5,101,0,0,151,152,5,108,0,0,152,153,5,105,0,0,153,154,5,102,
        0,0,154,16,1,0,0,0,155,156,5,101,0,0,156,157,5,108,0,0,157,158,5,
        115,0,0,158,159,5,101,0,0,159,18,1,0,0,0,160,161,5,114,0,0,161,162,
        5,101,0,0,162,163,5,116,0,0,163,164,5,117,0,0,164,165,5,114,0,0,
        165,166,5,110,0,0,166,20,1,0,0,0,167,168,5,112,0,0,168,169,5,114,
        0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,116,0,0,172,22,
        1,0,0,0,173,174,5,102,0,0,174,175,5,111,0,0,175,176,5,114,0,0,176,
        24,1,0,0,0,177,178,5,105,0,0,178,179,5,110,0,0,179,26,1,0,0,0,180,
        181,5,119,0,0,181,182,5,104,0,0,182,183,5,105,0,0,183,184,5,108,
        0,0,184,185,5,101,0,0,185,28,1,0,0,0,186,187,5,100,0,0,187,188,5,
        101,0,0,188,189,5,102,0,0,189,30,1,0,0,0,190,191,5,108,0,0,191,192,
        5,97,0,0,192,193,5,121,0,0,193,194,5,101,0,0,194,195,5,114,0,0,195,
        32,1,0,0,0,196,197,5,112,0,0,197,198,5,114,0,0,198,199,5,111,0,0,
        199,200,5,99,0,0,200,201,5,101,0,0,201,202,5,100,0,0,202,203,5,117,
        0,0,203,204,5,114,0,0,204,205,5,101,0,0,205,34,1,0,0,0,206,207,5,
        43,0,0,207,36,1,0,0,0,208,209,5,45,0,0,209,38,1,0,0,0,210,211,5,
        42,0,0,211,40,1,0,0,0,212,213,5,47,0,0,213,42,1,0,0,0,214,215,5,
        62,0,0,215,44,1,0,0,0,216,217,5,62,0,0,217,218,5,61,0,0,218,46,1,
        0,0,0,219,220,5,60,0,0,220,48,1,0,0,0,221,222,5,60,0,0,222,223,5,
        61,0,0,223,50,1,0,0,0,224,225,5,61,0,0,225,226,5,61,0,0,226,52,1,
        0,0,0,227,228,5,33,0,0,228,229,5,61,0,0,229,54,1,0,0,0,230,231,5,
        43,0,0,231,232,5,61,0,0,232,56,1,0,0,0,233,234,5,45,0,0,234,235,
        5,61,0,0,235,58,1,0,0,0,236,237,5,37,0,0,237,60,1,0,0,0,238,239,
        5,97,0,0,239,240,5,110,0,0,240,241,5,100,0,0,241,62,1,0,0,0,242,
        243,5,111,0,0,243,244,5,114,0,0,244,64,1,0,0,0,245,246,5,110,0,0,
        246,247,5,111,0,0,247,248,5,116,0,0,248,66,1,0,0,0,249,250,5,84,
        0,0,250,251,5,114,0,0,251,252,5,117,0,0,252,253,5,101,0,0,253,68,
        1,0,0,0,254,255,5,70,0,0,255,256,5,97,0,0,256,257,5,108,0,0,257,
        258,5,115,0,0,258,259,5,101,0,0,259,70,1,0,0,0,260,261,5,115,0,0,
        261,262,5,113,0,0,262,263,5,114,0,0,263,264,5,116,0,0,264,72,1,0,
        0,0,265,266,5,112,0,0,266,267,5,111,0,0,267,268,5,119,0,0,268,74,
        1,0,0,0,269,270,5,47,0,0,270,271,5,47,0,0,271,275,1,0,0,0,272,274,
        8,0,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,
        1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,6,37,0,0,279,76,
        1,0,0,0,280,282,5,45,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,284,
        1,0,0,0,283,285,3,107,53,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,
        1,0,0,0,286,287,1,0,0,0,287,78,1,0,0,0,288,290,5,45,0,0,289,288,
        1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,107,53,0,292,291,
        1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,296,
        1,0,0,0,296,298,5,46,0,0,297,299,3,107,53,0,298,297,1,0,0,0,299,
        300,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,80,1,0,0,0,302,307,
        5,34,0,0,303,306,3,105,52,0,304,306,8,1,0,0,305,303,1,0,0,0,305,
        304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,
        310,1,0,0,0,309,307,1,0,0,0,310,311,5,34,0,0,311,82,1,0,0,0,312,
        317,3,103,51,0,313,316,3,103,51,0,314,316,3,107,53,0,315,313,1,0,
        0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,
        0,0,318,84,1,0,0,0,319,317,1,0,0,0,320,321,5,40,0,0,321,86,1,0,0,
        0,322,323,5,41,0,0,323,88,1,0,0,0,324,325,5,91,0,0,325,90,1,0,0,
        0,326,327,5,93,0,0,327,92,1,0,0,0,328,329,5,123,0,0,329,94,1,0,0,
        0,330,331,5,125,0,0,331,96,1,0,0,0,332,333,5,44,0,0,333,98,1,0,0,
        0,334,335,5,46,0,0,335,100,1,0,0,0,336,337,5,61,0,0,337,102,1,0,
        0,0,338,339,7,2,0,0,339,104,1,0,0,0,340,341,5,92,0,0,341,342,7,3,
        0,0,342,106,1,0,0,0,343,344,7,4,0,0,344,108,1,0,0,0,345,347,7,5,
        0,0,346,345,1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,
        0,0,349,350,1,0,0,0,350,351,6,54,0,0,351,110,1,0,0,0,12,0,275,281,
        286,289,294,300,305,307,315,317,348,1,6,0,0
    ]

class RogueLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    IF = 7
    ELIF = 8
    ELSE = 9
    RETURN = 10
    PRINT = 11
    FOR = 12
    IN = 13
    WHILE = 14
    DEF = 15
    LAYER = 16
    PROCEDURE = 17
    PLUS = 18
    MINUS = 19
    MULT = 20
    DIV = 21
    GT = 22
    GTE = 23
    LT = 24
    LTE = 25
    EQ = 26
    NEQ = 27
    PEQ = 28
    MEQ = 29
    MOD = 30
    AND = 31
    OR = 32
    NOT = 33
    TRUE = 34
    FALSE = 35
    SQRT = 36
    POW = 37
    COMMENT_SINGLELINE = 38
    INT = 39
    FLOAT = 40
    STRING = 41
    ID = 42
    OPEN_PARENTH = 43
    CLOSED_PARENTH = 44
    OPEN_BRACK = 45
    CLOSED_BRACK = 46
    OPEN_CURL = 47
    CLOSED_CURL = 48
    COMMA = 49
    DOT = 50
    EQUAL_SIGN = 51
    WS = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'field'", "'let'", "'len'", "'pop'", "'WhiteNoise'", "'random'", 
            "'if'", "'elif'", "'else'", "'return'", "'print'", "'for'", 
            "'in'", "'while'", "'def'", "'layer'", "'procedure'", "'+'", 
            "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", 
            "'+='", "'-='", "'%'", "'and'", "'or'", "'not'", "'True'", "'False'", 
            "'sqrt'", "'pow'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "','", "'.'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
            "DEF", "LAYER", "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", 
            "GT", "GTE", "LT", "LTE", "EQ", "NEQ", "PEQ", "MEQ", "MOD", 
            "AND", "OR", "NOT", "TRUE", "FALSE", "SQRT", "POW", "COMMENT_SINGLELINE", 
            "INT", "FLOAT", "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", 
            "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", "COMMA", 
            "DOT", "EQUAL_SIGN", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "IF", 
                  "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
                  "DEF", "LAYER", "PROCEDURE", "PLUS", "MINUS", "MULT", 
                  "DIV", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", "PEQ", "MEQ", 
                  "MOD", "AND", "OR", "NOT", "TRUE", "FALSE", "SQRT", "POW", 
                  "COMMENT_SINGLELINE", "INT", "FLOAT", "STRING", "ID", 
                  "OPEN_PARENTH", "CLOSED_PARENTH", "OPEN_BRACK", "CLOSED_BRACK", 
                  "OPEN_CURL", "CLOSED_CURL", "COMMA", "DOT", "EQUAL_SIGN", 
                  "LETTER", "ESC", "DIGIT", "WS" ]

    grammarFileName = "RogueLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


