# Generated from C:/Users/Loke/PycharmProjects/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,
        26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,5,28,207,8,28,10,28,12,28,210,9,28,1,28,1,28,1,29,3,29,215,8,
        29,1,29,4,29,218,8,29,11,29,12,29,219,1,29,3,29,223,8,29,1,29,4,
        29,226,8,29,11,29,12,29,227,1,29,1,29,4,29,232,8,29,11,29,12,29,
        233,3,29,236,8,29,1,30,1,30,1,30,5,30,241,8,30,10,30,12,30,244,9,
        30,1,30,1,30,1,31,1,31,1,31,5,31,251,8,31,10,31,12,31,254,9,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,4,
        44,282,8,44,11,44,12,44,283,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,0,85,0,87,0,89,42,1,0,6,2,0,10,10,13,13,2,0,34,
        34,92,92,3,0,65,90,95,95,97,122,5,0,34,34,39,39,92,92,110,110,116,
        116,2,0,48,57,95,95,3,0,9,10,13,13,32,32,295,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,89,1,0,0,
        0,1,91,1,0,0,0,3,97,1,0,0,0,5,101,1,0,0,0,7,104,1,0,0,0,9,109,1,
        0,0,0,11,114,1,0,0,0,13,121,1,0,0,0,15,127,1,0,0,0,17,131,1,0,0,
        0,19,134,1,0,0,0,21,140,1,0,0,0,23,144,1,0,0,0,25,154,1,0,0,0,27,
        156,1,0,0,0,29,158,1,0,0,0,31,160,1,0,0,0,33,162,1,0,0,0,35,164,
        1,0,0,0,37,167,1,0,0,0,39,169,1,0,0,0,41,172,1,0,0,0,43,175,1,0,
        0,0,45,178,1,0,0,0,47,180,1,0,0,0,49,184,1,0,0,0,51,187,1,0,0,0,
        53,191,1,0,0,0,55,196,1,0,0,0,57,202,1,0,0,0,59,235,1,0,0,0,61,237,
        1,0,0,0,63,247,1,0,0,0,65,255,1,0,0,0,67,257,1,0,0,0,69,259,1,0,
        0,0,71,261,1,0,0,0,73,263,1,0,0,0,75,265,1,0,0,0,77,267,1,0,0,0,
        79,269,1,0,0,0,81,271,1,0,0,0,83,273,1,0,0,0,85,275,1,0,0,0,87,278,
        1,0,0,0,89,281,1,0,0,0,91,92,5,102,0,0,92,93,5,105,0,0,93,94,5,101,
        0,0,94,95,5,108,0,0,95,96,5,100,0,0,96,2,1,0,0,0,97,98,5,97,0,0,
        98,99,5,100,0,0,99,100,5,100,0,0,100,4,1,0,0,0,101,102,5,105,0,0,
        102,103,5,102,0,0,103,6,1,0,0,0,104,105,5,101,0,0,105,106,5,108,
        0,0,106,107,5,105,0,0,107,108,5,102,0,0,108,8,1,0,0,0,109,110,5,
        101,0,0,110,111,5,108,0,0,111,112,5,115,0,0,112,113,5,101,0,0,113,
        10,1,0,0,0,114,115,5,114,0,0,115,116,5,101,0,0,116,117,5,116,0,0,
        117,118,5,117,0,0,118,119,5,114,0,0,119,120,5,110,0,0,120,12,1,0,
        0,0,121,122,5,112,0,0,122,123,5,114,0,0,123,124,5,105,0,0,124,125,
        5,110,0,0,125,126,5,116,0,0,126,14,1,0,0,0,127,128,5,102,0,0,128,
        129,5,111,0,0,129,130,5,114,0,0,130,16,1,0,0,0,131,132,5,105,0,0,
        132,133,5,110,0,0,133,18,1,0,0,0,134,135,5,119,0,0,135,136,5,104,
        0,0,136,137,5,105,0,0,137,138,5,108,0,0,138,139,5,101,0,0,139,20,
        1,0,0,0,140,141,5,100,0,0,141,142,5,101,0,0,142,143,5,102,0,0,143,
        22,1,0,0,0,144,145,5,112,0,0,145,146,5,114,0,0,146,147,5,111,0,0,
        147,148,5,99,0,0,148,149,5,101,0,0,149,150,5,100,0,0,150,151,5,117,
        0,0,151,152,5,114,0,0,152,153,5,101,0,0,153,24,1,0,0,0,154,155,5,
        43,0,0,155,26,1,0,0,0,156,157,5,45,0,0,157,28,1,0,0,0,158,159,5,
        42,0,0,159,30,1,0,0,0,160,161,5,47,0,0,161,32,1,0,0,0,162,163,5,
        62,0,0,163,34,1,0,0,0,164,165,5,62,0,0,165,166,5,61,0,0,166,36,1,
        0,0,0,167,168,5,60,0,0,168,38,1,0,0,0,169,170,5,60,0,0,170,171,5,
        61,0,0,171,40,1,0,0,0,172,173,5,61,0,0,173,174,5,61,0,0,174,42,1,
        0,0,0,175,176,5,33,0,0,176,177,5,61,0,0,177,44,1,0,0,0,178,179,5,
        37,0,0,179,46,1,0,0,0,180,181,5,97,0,0,181,182,5,110,0,0,182,183,
        5,100,0,0,183,48,1,0,0,0,184,185,5,111,0,0,185,186,5,114,0,0,186,
        50,1,0,0,0,187,188,5,110,0,0,188,189,5,111,0,0,189,190,5,116,0,0,
        190,52,1,0,0,0,191,192,5,84,0,0,192,193,5,114,0,0,193,194,5,117,
        0,0,194,195,5,101,0,0,195,54,1,0,0,0,196,197,5,70,0,0,197,198,5,
        97,0,0,198,199,5,108,0,0,199,200,5,115,0,0,200,201,5,101,0,0,201,
        56,1,0,0,0,202,203,5,47,0,0,203,204,5,47,0,0,204,208,1,0,0,0,205,
        207,8,0,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,
        209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,6,28,0,0,212,
        58,1,0,0,0,213,215,5,45,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,
        217,1,0,0,0,216,218,3,87,43,0,217,216,1,0,0,0,218,219,1,0,0,0,219,
        217,1,0,0,0,219,220,1,0,0,0,220,236,1,0,0,0,221,223,5,45,0,0,222,
        221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,226,3,87,43,0,225,
        224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,
        229,1,0,0,0,229,231,5,46,0,0,230,232,3,87,43,0,231,230,1,0,0,0,232,
        233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,
        214,1,0,0,0,235,222,1,0,0,0,236,60,1,0,0,0,237,242,5,34,0,0,238,
        241,3,85,42,0,239,241,8,1,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,
        244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,0,244,
        242,1,0,0,0,245,246,5,34,0,0,246,62,1,0,0,0,247,252,3,83,41,0,248,
        251,3,83,41,0,249,251,3,87,43,0,250,248,1,0,0,0,250,249,1,0,0,0,
        251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,64,1,0,0,0,254,
        252,1,0,0,0,255,256,5,40,0,0,256,66,1,0,0,0,257,258,5,41,0,0,258,
        68,1,0,0,0,259,260,5,91,0,0,260,70,1,0,0,0,261,262,5,93,0,0,262,
        72,1,0,0,0,263,264,5,123,0,0,264,74,1,0,0,0,265,266,5,125,0,0,266,
        76,1,0,0,0,267,268,5,44,0,0,268,78,1,0,0,0,269,270,5,46,0,0,270,
        80,1,0,0,0,271,272,5,61,0,0,272,82,1,0,0,0,273,274,7,2,0,0,274,84,
        1,0,0,0,275,276,5,92,0,0,276,277,7,3,0,0,277,86,1,0,0,0,278,279,
        7,4,0,0,279,88,1,0,0,0,280,282,7,5,0,0,281,280,1,0,0,0,282,283,1,
        0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,6,
        44,0,0,286,90,1,0,0,0,13,0,208,214,219,222,227,233,235,240,242,250,
        252,283,1,6,0,0
    ]

class RogueLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IF = 3
    ELIF = 4
    ELSE = 5
    RETURN = 6
    PRINT = 7
    FOR = 8
    IN = 9
    WHILE = 10
    DEF = 11
    PROCEDURE = 12
    PLUS = 13
    MINUS = 14
    MULT = 15
    DIV = 16
    GT = 17
    GTE = 18
    LT = 19
    LTE = 20
    EQ = 21
    NEQ = 22
    MOD = 23
    AND = 24
    OR = 25
    NOT = 26
    TRUE = 27
    FALSE = 28
    COMMENT_SINGLELINE = 29
    NUMBER = 30
    STRING = 31
    ID = 32
    OPEN_PARENTH = 33
    CLOSED_PARENTH = 34
    OPEN_BRACK = 35
    CLOSED_BRACK = 36
    OPEN_CURL = 37
    CLOSED_CURL = 38
    COMMA = 39
    DOT = 40
    EQUAL_SIGN = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'field'", "'add'", "'if'", "'elif'", "'else'", "'return'", 
            "'print'", "'for'", "'in'", "'while'", "'def'", "'procedure'", 
            "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", 
            "'!='", "'%'", "'and'", "'or'", "'not'", "'True'", "'False'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
            "DEF", "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", "GT", "GTE", 
            "LT", "LTE", "EQ", "NEQ", "MOD", "AND", "OR", "NOT", "TRUE", 
            "FALSE", "COMMENT_SINGLELINE", "NUMBER", "STRING", "ID", "OPEN_PARENTH", 
            "CLOSED_PARENTH", "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", 
            "CLOSED_CURL", "COMMA", "DOT", "EQUAL_SIGN", "WS" ]

    ruleNames = [ "T__0", "T__1", "IF", "ELIF", "ELSE", "RETURN", "PRINT", 
                  "FOR", "IN", "WHILE", "DEF", "PROCEDURE", "PLUS", "MINUS", 
                  "MULT", "DIV", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", 
                  "MOD", "AND", "OR", "NOT", "TRUE", "FALSE", "COMMENT_SINGLELINE", 
                  "NUMBER", "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", 
                  "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", 
                  "COMMA", "DOT", "EQUAL_SIGN", "LETTER", "ESC", "NUMB", 
                  "WS" ]

    grammarFileName = "RogueLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


