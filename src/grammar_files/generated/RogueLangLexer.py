# Generated from C:/Users/nedim/Documents/GitHub/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,53,361,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,283,8,38,
        10,38,12,38,286,9,38,1,38,1,38,1,39,3,39,291,8,39,1,39,4,39,294,
        8,39,11,39,12,39,295,1,40,3,40,299,8,40,1,40,4,40,302,8,40,11,40,
        12,40,303,1,40,1,40,4,40,308,8,40,11,40,12,40,309,1,41,1,41,1,41,
        5,41,315,8,41,10,41,12,41,318,9,41,1,41,1,41,1,42,1,42,1,42,5,42,
        325,8,42,10,42,12,42,328,9,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
        1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,
        1,53,1,53,1,53,1,54,1,54,1,55,4,55,356,8,55,11,55,12,55,357,1,55,
        1,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,0,107,0,109,
        0,111,53,1,0,6,2,0,10,10,13,13,2,0,34,34,92,92,3,0,65,90,95,95,97,
        122,5,0,34,34,39,39,92,92,110,110,116,116,2,0,48,57,95,95,3,0,9,
        10,13,13,32,32,368,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,111,1,0,0,0,1,113,1,
        0,0,0,3,119,1,0,0,0,5,123,1,0,0,0,7,127,1,0,0,0,9,131,1,0,0,0,11,
        138,1,0,0,0,13,149,1,0,0,0,15,156,1,0,0,0,17,159,1,0,0,0,19,164,
        1,0,0,0,21,169,1,0,0,0,23,176,1,0,0,0,25,182,1,0,0,0,27,186,1,0,
        0,0,29,189,1,0,0,0,31,195,1,0,0,0,33,199,1,0,0,0,35,205,1,0,0,0,
        37,215,1,0,0,0,39,217,1,0,0,0,41,219,1,0,0,0,43,221,1,0,0,0,45,223,
        1,0,0,0,47,225,1,0,0,0,49,228,1,0,0,0,51,230,1,0,0,0,53,233,1,0,
        0,0,55,236,1,0,0,0,57,239,1,0,0,0,59,242,1,0,0,0,61,245,1,0,0,0,
        63,247,1,0,0,0,65,251,1,0,0,0,67,254,1,0,0,0,69,258,1,0,0,0,71,263,
        1,0,0,0,73,269,1,0,0,0,75,274,1,0,0,0,77,278,1,0,0,0,79,290,1,0,
        0,0,81,298,1,0,0,0,83,311,1,0,0,0,85,321,1,0,0,0,87,329,1,0,0,0,
        89,331,1,0,0,0,91,333,1,0,0,0,93,335,1,0,0,0,95,337,1,0,0,0,97,339,
        1,0,0,0,99,341,1,0,0,0,101,343,1,0,0,0,103,345,1,0,0,0,105,347,1,
        0,0,0,107,349,1,0,0,0,109,352,1,0,0,0,111,355,1,0,0,0,113,114,5,
        102,0,0,114,115,5,105,0,0,115,116,5,101,0,0,116,117,5,108,0,0,117,
        118,5,100,0,0,118,2,1,0,0,0,119,120,5,108,0,0,120,121,5,101,0,0,
        121,122,5,116,0,0,122,4,1,0,0,0,123,124,5,108,0,0,124,125,5,101,
        0,0,125,126,5,110,0,0,126,6,1,0,0,0,127,128,5,112,0,0,128,129,5,
        111,0,0,129,130,5,112,0,0,130,8,1,0,0,0,131,132,5,115,0,0,132,133,
        5,116,0,0,133,134,5,114,0,0,134,135,5,117,0,0,135,136,5,99,0,0,136,
        137,5,116,0,0,137,10,1,0,0,0,138,139,5,87,0,0,139,140,5,104,0,0,
        140,141,5,105,0,0,141,142,5,116,0,0,142,143,5,101,0,0,143,144,5,
        78,0,0,144,145,5,111,0,0,145,146,5,105,0,0,146,147,5,115,0,0,147,
        148,5,101,0,0,148,12,1,0,0,0,149,150,5,114,0,0,150,151,5,97,0,0,
        151,152,5,110,0,0,152,153,5,100,0,0,153,154,5,111,0,0,154,155,5,
        109,0,0,155,14,1,0,0,0,156,157,5,105,0,0,157,158,5,102,0,0,158,16,
        1,0,0,0,159,160,5,101,0,0,160,161,5,108,0,0,161,162,5,105,0,0,162,
        163,5,102,0,0,163,18,1,0,0,0,164,165,5,101,0,0,165,166,5,108,0,0,
        166,167,5,115,0,0,167,168,5,101,0,0,168,20,1,0,0,0,169,170,5,114,
        0,0,170,171,5,101,0,0,171,172,5,116,0,0,172,173,5,117,0,0,173,174,
        5,114,0,0,174,175,5,110,0,0,175,22,1,0,0,0,176,177,5,112,0,0,177,
        178,5,114,0,0,178,179,5,105,0,0,179,180,5,110,0,0,180,181,5,116,
        0,0,181,24,1,0,0,0,182,183,5,102,0,0,183,184,5,111,0,0,184,185,5,
        114,0,0,185,26,1,0,0,0,186,187,5,105,0,0,187,188,5,110,0,0,188,28,
        1,0,0,0,189,190,5,119,0,0,190,191,5,104,0,0,191,192,5,105,0,0,192,
        193,5,108,0,0,193,194,5,101,0,0,194,30,1,0,0,0,195,196,5,100,0,0,
        196,197,5,101,0,0,197,198,5,102,0,0,198,32,1,0,0,0,199,200,5,108,
        0,0,200,201,5,97,0,0,201,202,5,121,0,0,202,203,5,101,0,0,203,204,
        5,114,0,0,204,34,1,0,0,0,205,206,5,112,0,0,206,207,5,114,0,0,207,
        208,5,111,0,0,208,209,5,99,0,0,209,210,5,101,0,0,210,211,5,100,0,
        0,211,212,5,117,0,0,212,213,5,114,0,0,213,214,5,101,0,0,214,36,1,
        0,0,0,215,216,5,43,0,0,216,38,1,0,0,0,217,218,5,45,0,0,218,40,1,
        0,0,0,219,220,5,42,0,0,220,42,1,0,0,0,221,222,5,47,0,0,222,44,1,
        0,0,0,223,224,5,62,0,0,224,46,1,0,0,0,225,226,5,62,0,0,226,227,5,
        61,0,0,227,48,1,0,0,0,228,229,5,60,0,0,229,50,1,0,0,0,230,231,5,
        60,0,0,231,232,5,61,0,0,232,52,1,0,0,0,233,234,5,61,0,0,234,235,
        5,61,0,0,235,54,1,0,0,0,236,237,5,33,0,0,237,238,5,61,0,0,238,56,
        1,0,0,0,239,240,5,43,0,0,240,241,5,61,0,0,241,58,1,0,0,0,242,243,
        5,45,0,0,243,244,5,61,0,0,244,60,1,0,0,0,245,246,5,37,0,0,246,62,
        1,0,0,0,247,248,5,97,0,0,248,249,5,110,0,0,249,250,5,100,0,0,250,
        64,1,0,0,0,251,252,5,111,0,0,252,253,5,114,0,0,253,66,1,0,0,0,254,
        255,5,110,0,0,255,256,5,111,0,0,256,257,5,116,0,0,257,68,1,0,0,0,
        258,259,5,84,0,0,259,260,5,114,0,0,260,261,5,117,0,0,261,262,5,101,
        0,0,262,70,1,0,0,0,263,264,5,70,0,0,264,265,5,97,0,0,265,266,5,108,
        0,0,266,267,5,115,0,0,267,268,5,101,0,0,268,72,1,0,0,0,269,270,5,
        115,0,0,270,271,5,113,0,0,271,272,5,114,0,0,272,273,5,116,0,0,273,
        74,1,0,0,0,274,275,5,112,0,0,275,276,5,111,0,0,276,277,5,119,0,0,
        277,76,1,0,0,0,278,279,5,47,0,0,279,280,5,47,0,0,280,284,1,0,0,0,
        281,283,8,0,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,
        284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,6,38,0,0,
        288,78,1,0,0,0,289,291,5,45,0,0,290,289,1,0,0,0,290,291,1,0,0,0,
        291,293,1,0,0,0,292,294,3,109,54,0,293,292,1,0,0,0,294,295,1,0,0,
        0,295,293,1,0,0,0,295,296,1,0,0,0,296,80,1,0,0,0,297,299,5,45,0,
        0,298,297,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,302,3,109,
        54,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,
        0,0,304,305,1,0,0,0,305,307,5,46,0,0,306,308,3,109,54,0,307,306,
        1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,82,1,
        0,0,0,311,316,5,34,0,0,312,315,3,107,53,0,313,315,8,1,0,0,314,312,
        1,0,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,
        1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,5,34,0,0,320,84,
        1,0,0,0,321,326,3,105,52,0,322,325,3,105,52,0,323,325,3,109,54,0,
        324,322,1,0,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,
        326,327,1,0,0,0,327,86,1,0,0,0,328,326,1,0,0,0,329,330,5,40,0,0,
        330,88,1,0,0,0,331,332,5,41,0,0,332,90,1,0,0,0,333,334,5,91,0,0,
        334,92,1,0,0,0,335,336,5,93,0,0,336,94,1,0,0,0,337,338,5,123,0,0,
        338,96,1,0,0,0,339,340,5,125,0,0,340,98,1,0,0,0,341,342,5,44,0,0,
        342,100,1,0,0,0,343,344,5,46,0,0,344,102,1,0,0,0,345,346,5,61,0,
        0,346,104,1,0,0,0,347,348,7,2,0,0,348,106,1,0,0,0,349,350,5,92,0,
        0,350,351,7,3,0,0,351,108,1,0,0,0,352,353,7,4,0,0,353,110,1,0,0,
        0,354,356,7,5,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,
        0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,6,55,0,0,360,112,1,0,0,
        0,12,0,284,290,295,298,303,309,314,316,324,326,357,1,6,0,0
    ]

class RogueLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    IF = 8
    ELIF = 9
    ELSE = 10
    RETURN = 11
    PRINT = 12
    FOR = 13
    IN = 14
    WHILE = 15
    DEF = 16
    LAYER = 17
    PROCEDURE = 18
    PLUS = 19
    MINUS = 20
    MULT = 21
    DIV = 22
    GT = 23
    GTE = 24
    LT = 25
    LTE = 26
    EQ = 27
    NEQ = 28
    PEQ = 29
    MEQ = 30
    MOD = 31
    AND = 32
    OR = 33
    NOT = 34
    TRUE = 35
    FALSE = 36
    SQRT = 37
    POW = 38
    COMMENT_SINGLELINE = 39
    INT = 40
    FLOAT = 41
    STRING = 42
    ID = 43
    OPEN_PARENTH = 44
    CLOSED_PARENTH = 45
    OPEN_BRACK = 46
    CLOSED_BRACK = 47
    OPEN_CURL = 48
    CLOSED_CURL = 49
    COMMA = 50
    DOT = 51
    EQUAL_SIGN = 52
    WS = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'field'", "'let'", "'len'", "'pop'", "'struct'", "'WhiteNoise'", 
            "'random'", "'if'", "'elif'", "'else'", "'return'", "'print'", 
            "'for'", "'in'", "'while'", "'def'", "'layer'", "'procedure'", 
            "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", 
            "'!='", "'+='", "'-='", "'%'", "'and'", "'or'", "'not'", "'True'", 
            "'False'", "'sqrt'", "'pow'", "'('", "')'", "'['", "']'", "'{'", 
            "'}'", "','", "'.'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
            "DEF", "LAYER", "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", 
            "GT", "GTE", "LT", "LTE", "EQ", "NEQ", "PEQ", "MEQ", "MOD", 
            "AND", "OR", "NOT", "TRUE", "FALSE", "SQRT", "POW", "COMMENT_SINGLELINE", 
            "INT", "FLOAT", "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", 
            "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", "COMMA", 
            "DOT", "EQUAL_SIGN", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", 
                  "WHILE", "DEF", "LAYER", "PROCEDURE", "PLUS", "MINUS", 
                  "MULT", "DIV", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", 
                  "PEQ", "MEQ", "MOD", "AND", "OR", "NOT", "TRUE", "FALSE", 
                  "SQRT", "POW", "COMMENT_SINGLELINE", "INT", "FLOAT", "STRING", 
                  "ID", "OPEN_PARENTH", "CLOSED_PARENTH", "OPEN_BRACK", 
                  "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", "COMMA", "DOT", 
                  "EQUAL_SIGN", "LETTER", "ESC", "DIGIT", "WS" ]

    grammarFileName = "RogueLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


