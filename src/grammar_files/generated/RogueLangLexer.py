# Generated from C:/Users/Loke/PycharmProjects/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,55,381,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,
        1,40,1,40,1,40,5,40,303,8,40,10,40,12,40,306,9,40,1,40,1,40,1,41,
        3,41,311,8,41,1,41,4,41,314,8,41,11,41,12,41,315,1,42,3,42,319,8,
        42,1,42,4,42,322,8,42,11,42,12,42,323,1,42,1,42,4,42,328,8,42,11,
        42,12,42,329,1,43,1,43,1,43,5,43,335,8,43,10,43,12,43,338,9,43,1,
        43,1,43,1,44,1,44,1,44,5,44,345,8,44,10,44,12,44,348,9,44,1,45,1,
        45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,
        52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,4,57,376,
        8,57,11,57,12,57,377,1,57,1,57,0,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,0,111,0,113,0,115,55,1,0,6,2,0,10,10,
        13,13,2,0,34,34,92,92,3,0,65,90,95,95,97,122,5,0,34,34,39,39,92,
        92,110,110,116,116,2,0,48,57,95,95,3,0,9,10,13,13,32,32,388,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,115,1,0,0,0,1,
        117,1,0,0,0,3,124,1,0,0,0,5,131,1,0,0,0,7,139,1,0,0,0,9,143,1,0,
        0,0,11,147,1,0,0,0,13,151,1,0,0,0,15,158,1,0,0,0,17,169,1,0,0,0,
        19,176,1,0,0,0,21,179,1,0,0,0,23,184,1,0,0,0,25,189,1,0,0,0,27,196,
        1,0,0,0,29,202,1,0,0,0,31,206,1,0,0,0,33,209,1,0,0,0,35,215,1,0,
        0,0,37,219,1,0,0,0,39,225,1,0,0,0,41,235,1,0,0,0,43,237,1,0,0,0,
        45,239,1,0,0,0,47,241,1,0,0,0,49,243,1,0,0,0,51,245,1,0,0,0,53,248,
        1,0,0,0,55,250,1,0,0,0,57,253,1,0,0,0,59,256,1,0,0,0,61,259,1,0,
        0,0,63,262,1,0,0,0,65,265,1,0,0,0,67,267,1,0,0,0,69,271,1,0,0,0,
        71,274,1,0,0,0,73,278,1,0,0,0,75,283,1,0,0,0,77,289,1,0,0,0,79,294,
        1,0,0,0,81,298,1,0,0,0,83,310,1,0,0,0,85,318,1,0,0,0,87,331,1,0,
        0,0,89,341,1,0,0,0,91,349,1,0,0,0,93,351,1,0,0,0,95,353,1,0,0,0,
        97,355,1,0,0,0,99,357,1,0,0,0,101,359,1,0,0,0,103,361,1,0,0,0,105,
        363,1,0,0,0,107,365,1,0,0,0,109,367,1,0,0,0,111,369,1,0,0,0,113,
        372,1,0,0,0,115,375,1,0,0,0,117,118,5,111,0,0,118,119,5,117,0,0,
        119,120,5,116,0,0,120,121,5,112,0,0,121,122,5,117,0,0,122,123,5,
        116,0,0,123,2,1,0,0,0,124,125,5,67,0,0,125,126,5,117,0,0,126,127,
        5,115,0,0,127,128,5,116,0,0,128,129,5,111,0,0,129,130,5,109,0,0,
        130,4,1,0,0,0,131,132,5,84,0,0,132,133,5,105,0,0,133,134,5,108,0,
        0,134,135,5,101,0,0,135,136,5,77,0,0,136,137,5,97,0,0,137,138,5,
        112,0,0,138,6,1,0,0,0,139,140,5,108,0,0,140,141,5,101,0,0,141,142,
        5,116,0,0,142,8,1,0,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,
        146,5,110,0,0,146,10,1,0,0,0,147,148,5,112,0,0,148,149,5,111,0,0,
        149,150,5,112,0,0,150,12,1,0,0,0,151,152,5,115,0,0,152,153,5,116,
        0,0,153,154,5,114,0,0,154,155,5,117,0,0,155,156,5,99,0,0,156,157,
        5,116,0,0,157,14,1,0,0,0,158,159,5,87,0,0,159,160,5,104,0,0,160,
        161,5,105,0,0,161,162,5,116,0,0,162,163,5,101,0,0,163,164,5,78,0,
        0,164,165,5,111,0,0,165,166,5,105,0,0,166,167,5,115,0,0,167,168,
        5,101,0,0,168,16,1,0,0,0,169,170,5,114,0,0,170,171,5,97,0,0,171,
        172,5,110,0,0,172,173,5,100,0,0,173,174,5,111,0,0,174,175,5,109,
        0,0,175,18,1,0,0,0,176,177,5,105,0,0,177,178,5,102,0,0,178,20,1,
        0,0,0,179,180,5,101,0,0,180,181,5,108,0,0,181,182,5,105,0,0,182,
        183,5,102,0,0,183,22,1,0,0,0,184,185,5,101,0,0,185,186,5,108,0,0,
        186,187,5,115,0,0,187,188,5,101,0,0,188,24,1,0,0,0,189,190,5,114,
        0,0,190,191,5,101,0,0,191,192,5,116,0,0,192,193,5,117,0,0,193,194,
        5,114,0,0,194,195,5,110,0,0,195,26,1,0,0,0,196,197,5,112,0,0,197,
        198,5,114,0,0,198,199,5,105,0,0,199,200,5,110,0,0,200,201,5,116,
        0,0,201,28,1,0,0,0,202,203,5,102,0,0,203,204,5,111,0,0,204,205,5,
        114,0,0,205,30,1,0,0,0,206,207,5,105,0,0,207,208,5,110,0,0,208,32,
        1,0,0,0,209,210,5,119,0,0,210,211,5,104,0,0,211,212,5,105,0,0,212,
        213,5,108,0,0,213,214,5,101,0,0,214,34,1,0,0,0,215,216,5,100,0,0,
        216,217,5,101,0,0,217,218,5,102,0,0,218,36,1,0,0,0,219,220,5,108,
        0,0,220,221,5,97,0,0,221,222,5,121,0,0,222,223,5,101,0,0,223,224,
        5,114,0,0,224,38,1,0,0,0,225,226,5,112,0,0,226,227,5,114,0,0,227,
        228,5,111,0,0,228,229,5,99,0,0,229,230,5,101,0,0,230,231,5,100,0,
        0,231,232,5,117,0,0,232,233,5,114,0,0,233,234,5,101,0,0,234,40,1,
        0,0,0,235,236,5,43,0,0,236,42,1,0,0,0,237,238,5,45,0,0,238,44,1,
        0,0,0,239,240,5,42,0,0,240,46,1,0,0,0,241,242,5,47,0,0,242,48,1,
        0,0,0,243,244,5,62,0,0,244,50,1,0,0,0,245,246,5,62,0,0,246,247,5,
        61,0,0,247,52,1,0,0,0,248,249,5,60,0,0,249,54,1,0,0,0,250,251,5,
        60,0,0,251,252,5,61,0,0,252,56,1,0,0,0,253,254,5,61,0,0,254,255,
        5,61,0,0,255,58,1,0,0,0,256,257,5,33,0,0,257,258,5,61,0,0,258,60,
        1,0,0,0,259,260,5,43,0,0,260,261,5,61,0,0,261,62,1,0,0,0,262,263,
        5,45,0,0,263,264,5,61,0,0,264,64,1,0,0,0,265,266,5,37,0,0,266,66,
        1,0,0,0,267,268,5,97,0,0,268,269,5,110,0,0,269,270,5,100,0,0,270,
        68,1,0,0,0,271,272,5,111,0,0,272,273,5,114,0,0,273,70,1,0,0,0,274,
        275,5,110,0,0,275,276,5,111,0,0,276,277,5,116,0,0,277,72,1,0,0,0,
        278,279,5,84,0,0,279,280,5,114,0,0,280,281,5,117,0,0,281,282,5,101,
        0,0,282,74,1,0,0,0,283,284,5,70,0,0,284,285,5,97,0,0,285,286,5,108,
        0,0,286,287,5,115,0,0,287,288,5,101,0,0,288,76,1,0,0,0,289,290,5,
        115,0,0,290,291,5,113,0,0,291,292,5,114,0,0,292,293,5,116,0,0,293,
        78,1,0,0,0,294,295,5,112,0,0,295,296,5,111,0,0,296,297,5,119,0,0,
        297,80,1,0,0,0,298,299,5,47,0,0,299,300,5,47,0,0,300,304,1,0,0,0,
        301,303,8,0,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,
        304,305,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,6,40,0,0,
        308,82,1,0,0,0,309,311,5,45,0,0,310,309,1,0,0,0,310,311,1,0,0,0,
        311,313,1,0,0,0,312,314,3,113,56,0,313,312,1,0,0,0,314,315,1,0,0,
        0,315,313,1,0,0,0,315,316,1,0,0,0,316,84,1,0,0,0,317,319,5,45,0,
        0,318,317,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,322,3,113,
        56,0,321,320,1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,
        0,0,324,325,1,0,0,0,325,327,5,46,0,0,326,328,3,113,56,0,327,326,
        1,0,0,0,328,329,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,86,1,
        0,0,0,331,336,5,34,0,0,332,335,3,111,55,0,333,335,8,1,0,0,334,332,
        1,0,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,
        1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,340,5,34,0,0,340,88,
        1,0,0,0,341,346,3,109,54,0,342,345,3,109,54,0,343,345,3,113,56,0,
        344,342,1,0,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,
        346,347,1,0,0,0,347,90,1,0,0,0,348,346,1,0,0,0,349,350,5,40,0,0,
        350,92,1,0,0,0,351,352,5,41,0,0,352,94,1,0,0,0,353,354,5,91,0,0,
        354,96,1,0,0,0,355,356,5,93,0,0,356,98,1,0,0,0,357,358,5,123,0,0,
        358,100,1,0,0,0,359,360,5,125,0,0,360,102,1,0,0,0,361,362,5,44,0,
        0,362,104,1,0,0,0,363,364,5,46,0,0,364,106,1,0,0,0,365,366,5,61,
        0,0,366,108,1,0,0,0,367,368,7,2,0,0,368,110,1,0,0,0,369,370,5,92,
        0,0,370,371,7,3,0,0,371,112,1,0,0,0,372,373,7,4,0,0,373,114,1,0,
        0,0,374,376,7,5,0,0,375,374,1,0,0,0,376,377,1,0,0,0,377,375,1,0,
        0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,6,57,0,0,380,116,1,0,
        0,0,12,0,304,310,315,318,323,329,334,336,344,346,377,1,6,0,0
    ]

class RogueLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    RETURN = 13
    PRINT = 14
    FOR = 15
    IN = 16
    WHILE = 17
    DEF = 18
    LAYER = 19
    PROCEDURE = 20
    PLUS = 21
    MINUS = 22
    MULT = 23
    DIV = 24
    GT = 25
    GTE = 26
    LT = 27
    LTE = 28
    EQ = 29
    NEQ = 30
    PEQ = 31
    MEQ = 32
    MOD = 33
    AND = 34
    OR = 35
    NOT = 36
    TRUE = 37
    FALSE = 38
    SQRT = 39
    POW = 40
    COMMENT_SINGLELINE = 41
    INT = 42
    FLOAT = 43
    STRING = 44
    ID = 45
    OPEN_PARENTH = 46
    CLOSED_PARENTH = 47
    OPEN_BRACK = 48
    CLOSED_BRACK = 49
    OPEN_CURL = 50
    CLOSED_CURL = 51
    COMMA = 52
    DOT = 53
    EQUAL_SIGN = 54
    WS = 55

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'output'", "'Custom'", "'TileMap'", "'let'", "'len'", "'pop'", 
            "'struct'", "'WhiteNoise'", "'random'", "'if'", "'elif'", "'else'", 
            "'return'", "'print'", "'for'", "'in'", "'while'", "'def'", 
            "'layer'", "'procedure'", "'+'", "'-'", "'*'", "'/'", "'>'", 
            "'>='", "'<'", "'<='", "'=='", "'!='", "'+='", "'-='", "'%'", 
            "'and'", "'or'", "'not'", "'True'", "'False'", "'sqrt'", "'pow'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
            "DEF", "LAYER", "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", 
            "GT", "GTE", "LT", "LTE", "EQ", "NEQ", "PEQ", "MEQ", "MOD", 
            "AND", "OR", "NOT", "TRUE", "FALSE", "SQRT", "POW", "COMMENT_SINGLELINE", 
            "INT", "FLOAT", "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", 
            "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", "COMMA", 
            "DOT", "EQUAL_SIGN", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "IF", "ELIF", "ELSE", "RETURN", "PRINT", 
                  "FOR", "IN", "WHILE", "DEF", "LAYER", "PROCEDURE", "PLUS", 
                  "MINUS", "MULT", "DIV", "GT", "GTE", "LT", "LTE", "EQ", 
                  "NEQ", "PEQ", "MEQ", "MOD", "AND", "OR", "NOT", "TRUE", 
                  "FALSE", "SQRT", "POW", "COMMENT_SINGLELINE", "INT", "FLOAT", 
                  "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", "OPEN_BRACK", 
                  "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", "COMMA", "DOT", 
                  "EQUAL_SIGN", "LETTER", "ESC", "DIGIT", "WS" ]

    grammarFileName = "RogueLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


