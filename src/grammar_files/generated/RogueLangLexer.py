# Generated from C:/Users/Loke/PycharmProjects/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,240,8,33,10,33,12,33,243,
        9,33,1,33,1,33,1,34,3,34,248,8,34,1,34,4,34,251,8,34,11,34,12,34,
        252,1,35,3,35,256,8,35,1,35,4,35,259,8,35,11,35,12,35,260,1,35,1,
        35,4,35,265,8,35,11,35,12,35,266,1,36,1,36,1,36,5,36,272,8,36,10,
        36,12,36,275,9,36,1,36,1,36,1,37,1,37,1,37,5,37,282,8,37,10,37,12,
        37,285,9,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,
        49,1,49,1,50,4,50,313,8,50,11,50,12,50,314,1,50,1,50,0,0,51,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,0,97,0,99,0,101,48,1,0,6,2,0,10,10,13,13,2,0,34,34,92,92,3,0,
        65,90,95,95,97,122,5,0,34,34,39,39,92,92,110,110,116,116,2,0,48,
        57,95,95,3,0,9,10,13,13,32,32,325,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,101,1,
        0,0,0,1,103,1,0,0,0,3,109,1,0,0,0,5,113,1,0,0,0,7,117,1,0,0,0,9,
        121,1,0,0,0,11,128,1,0,0,0,13,131,1,0,0,0,15,136,1,0,0,0,17,141,
        1,0,0,0,19,148,1,0,0,0,21,154,1,0,0,0,23,158,1,0,0,0,25,161,1,0,
        0,0,27,167,1,0,0,0,29,171,1,0,0,0,31,181,1,0,0,0,33,183,1,0,0,0,
        35,185,1,0,0,0,37,187,1,0,0,0,39,189,1,0,0,0,41,191,1,0,0,0,43,194,
        1,0,0,0,45,196,1,0,0,0,47,199,1,0,0,0,49,202,1,0,0,0,51,205,1,0,
        0,0,53,208,1,0,0,0,55,211,1,0,0,0,57,213,1,0,0,0,59,217,1,0,0,0,
        61,220,1,0,0,0,63,224,1,0,0,0,65,229,1,0,0,0,67,235,1,0,0,0,69,247,
        1,0,0,0,71,255,1,0,0,0,73,268,1,0,0,0,75,278,1,0,0,0,77,286,1,0,
        0,0,79,288,1,0,0,0,81,290,1,0,0,0,83,292,1,0,0,0,85,294,1,0,0,0,
        87,296,1,0,0,0,89,298,1,0,0,0,91,300,1,0,0,0,93,302,1,0,0,0,95,304,
        1,0,0,0,97,306,1,0,0,0,99,309,1,0,0,0,101,312,1,0,0,0,103,104,5,
        102,0,0,104,105,5,105,0,0,105,106,5,101,0,0,106,107,5,108,0,0,107,
        108,5,100,0,0,108,2,1,0,0,0,109,110,5,108,0,0,110,111,5,101,0,0,
        111,112,5,116,0,0,112,4,1,0,0,0,113,114,5,108,0,0,114,115,5,101,
        0,0,115,116,5,110,0,0,116,6,1,0,0,0,117,118,5,112,0,0,118,119,5,
        111,0,0,119,120,5,112,0,0,120,8,1,0,0,0,121,122,5,114,0,0,122,123,
        5,97,0,0,123,124,5,110,0,0,124,125,5,100,0,0,125,126,5,111,0,0,126,
        127,5,109,0,0,127,10,1,0,0,0,128,129,5,105,0,0,129,130,5,102,0,0,
        130,12,1,0,0,0,131,132,5,101,0,0,132,133,5,108,0,0,133,134,5,105,
        0,0,134,135,5,102,0,0,135,14,1,0,0,0,136,137,5,101,0,0,137,138,5,
        108,0,0,138,139,5,115,0,0,139,140,5,101,0,0,140,16,1,0,0,0,141,142,
        5,114,0,0,142,143,5,101,0,0,143,144,5,116,0,0,144,145,5,117,0,0,
        145,146,5,114,0,0,146,147,5,110,0,0,147,18,1,0,0,0,148,149,5,112,
        0,0,149,150,5,114,0,0,150,151,5,105,0,0,151,152,5,110,0,0,152,153,
        5,116,0,0,153,20,1,0,0,0,154,155,5,102,0,0,155,156,5,111,0,0,156,
        157,5,114,0,0,157,22,1,0,0,0,158,159,5,105,0,0,159,160,5,110,0,0,
        160,24,1,0,0,0,161,162,5,119,0,0,162,163,5,104,0,0,163,164,5,105,
        0,0,164,165,5,108,0,0,165,166,5,101,0,0,166,26,1,0,0,0,167,168,5,
        100,0,0,168,169,5,101,0,0,169,170,5,102,0,0,170,28,1,0,0,0,171,172,
        5,112,0,0,172,173,5,114,0,0,173,174,5,111,0,0,174,175,5,99,0,0,175,
        176,5,101,0,0,176,177,5,100,0,0,177,178,5,117,0,0,178,179,5,114,
        0,0,179,180,5,101,0,0,180,30,1,0,0,0,181,182,5,43,0,0,182,32,1,0,
        0,0,183,184,5,45,0,0,184,34,1,0,0,0,185,186,5,42,0,0,186,36,1,0,
        0,0,187,188,5,47,0,0,188,38,1,0,0,0,189,190,5,62,0,0,190,40,1,0,
        0,0,191,192,5,62,0,0,192,193,5,61,0,0,193,42,1,0,0,0,194,195,5,60,
        0,0,195,44,1,0,0,0,196,197,5,60,0,0,197,198,5,61,0,0,198,46,1,0,
        0,0,199,200,5,61,0,0,200,201,5,61,0,0,201,48,1,0,0,0,202,203,5,33,
        0,0,203,204,5,61,0,0,204,50,1,0,0,0,205,206,5,43,0,0,206,207,5,61,
        0,0,207,52,1,0,0,0,208,209,5,45,0,0,209,210,5,61,0,0,210,54,1,0,
        0,0,211,212,5,37,0,0,212,56,1,0,0,0,213,214,5,97,0,0,214,215,5,110,
        0,0,215,216,5,100,0,0,216,58,1,0,0,0,217,218,5,111,0,0,218,219,5,
        114,0,0,219,60,1,0,0,0,220,221,5,110,0,0,221,222,5,111,0,0,222,223,
        5,116,0,0,223,62,1,0,0,0,224,225,5,84,0,0,225,226,5,114,0,0,226,
        227,5,117,0,0,227,228,5,101,0,0,228,64,1,0,0,0,229,230,5,70,0,0,
        230,231,5,97,0,0,231,232,5,108,0,0,232,233,5,115,0,0,233,234,5,101,
        0,0,234,66,1,0,0,0,235,236,5,47,0,0,236,237,5,47,0,0,237,241,1,0,
        0,0,238,240,8,0,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,239,1,0,
        0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,6,33,
        0,0,245,68,1,0,0,0,246,248,5,45,0,0,247,246,1,0,0,0,247,248,1,0,
        0,0,248,250,1,0,0,0,249,251,3,99,49,0,250,249,1,0,0,0,251,252,1,
        0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,70,1,0,0,0,254,256,5,45,
        0,0,255,254,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,259,3,99,
        49,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,
        0,0,261,262,1,0,0,0,262,264,5,46,0,0,263,265,3,99,49,0,264,263,1,
        0,0,0,265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,72,1,0,
        0,0,268,273,5,34,0,0,269,272,3,97,48,0,270,272,8,1,0,0,271,269,1,
        0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,
        0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,5,34,0,0,277,74,1,
        0,0,0,278,283,3,95,47,0,279,282,3,95,47,0,280,282,3,99,49,0,281,
        279,1,0,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,
        284,1,0,0,0,284,76,1,0,0,0,285,283,1,0,0,0,286,287,5,40,0,0,287,
        78,1,0,0,0,288,289,5,41,0,0,289,80,1,0,0,0,290,291,5,91,0,0,291,
        82,1,0,0,0,292,293,5,93,0,0,293,84,1,0,0,0,294,295,5,123,0,0,295,
        86,1,0,0,0,296,297,5,125,0,0,297,88,1,0,0,0,298,299,5,44,0,0,299,
        90,1,0,0,0,300,301,5,46,0,0,301,92,1,0,0,0,302,303,5,61,0,0,303,
        94,1,0,0,0,304,305,7,2,0,0,305,96,1,0,0,0,306,307,5,92,0,0,307,308,
        7,3,0,0,308,98,1,0,0,0,309,310,7,4,0,0,310,100,1,0,0,0,311,313,7,
        5,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,1,0,0,0,314,315,1,
        0,0,0,315,316,1,0,0,0,316,317,6,50,0,0,317,102,1,0,0,0,12,0,241,
        247,252,255,260,266,271,273,281,283,314,1,6,0,0
    ]

class RogueLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    IF = 6
    ELIF = 7
    ELSE = 8
    RETURN = 9
    PRINT = 10
    FOR = 11
    IN = 12
    WHILE = 13
    DEF = 14
    PROCEDURE = 15
    PLUS = 16
    MINUS = 17
    MULT = 18
    DIV = 19
    GT = 20
    GTE = 21
    LT = 22
    LTE = 23
    EQ = 24
    NEQ = 25
    PEQ = 26
    MEQ = 27
    MOD = 28
    AND = 29
    OR = 30
    NOT = 31
    TRUE = 32
    FALSE = 33
    COMMENT_SINGLELINE = 34
    INT = 35
    FLOAT = 36
    STRING = 37
    ID = 38
    OPEN_PARENTH = 39
    CLOSED_PARENTH = 40
    OPEN_BRACK = 41
    CLOSED_BRACK = 42
    OPEN_CURL = 43
    CLOSED_CURL = 44
    COMMA = 45
    DOT = 46
    EQUAL_SIGN = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'field'", "'let'", "'len'", "'pop'", "'random'", "'if'", "'elif'", 
            "'else'", "'return'", "'print'", "'for'", "'in'", "'while'", 
            "'def'", "'procedure'", "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", 
            "'<'", "'<='", "'=='", "'!='", "'+='", "'-='", "'%'", "'and'", 
            "'or'", "'not'", "'True'", "'False'", "'('", "')'", "'['", "']'", 
            "'{'", "'}'", "','", "'.'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
            "DEF", "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", "GT", "GTE", 
            "LT", "LTE", "EQ", "NEQ", "PEQ", "MEQ", "MOD", "AND", "OR", 
            "NOT", "TRUE", "FALSE", "COMMENT_SINGLELINE", "INT", "FLOAT", 
            "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", "OPEN_BRACK", 
            "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", "COMMA", "DOT", 
            "EQUAL_SIGN", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "IF", "ELIF", 
                  "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", "DEF", 
                  "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", "GT", "GTE", 
                  "LT", "LTE", "EQ", "NEQ", "PEQ", "MEQ", "MOD", "AND", 
                  "OR", "NOT", "TRUE", "FALSE", "COMMENT_SINGLELINE", "INT", 
                  "FLOAT", "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", 
                  "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", 
                  "COMMA", "DOT", "EQUAL_SIGN", "LETTER", "ESC", "DIGIT", 
                  "WS" ]

    grammarFileName = "RogueLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


