# Generated from C:/Users/Loke/PycharmProjects/P4-comp/src/grammar_files/RogueLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,292,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,5,29,212,8,29,10,29,12,29,215,9,29,1,29,
        1,29,1,30,3,30,220,8,30,1,30,4,30,223,8,30,11,30,12,30,224,1,30,
        3,30,228,8,30,1,30,4,30,231,8,30,11,30,12,30,232,1,30,1,30,4,30,
        237,8,30,11,30,12,30,238,3,30,241,8,30,1,31,1,31,1,31,5,31,246,8,
        31,10,31,12,31,249,9,31,1,31,1,31,1,32,1,32,1,32,5,32,256,8,32,10,
        32,12,32,259,9,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
        37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
        43,1,44,1,44,1,45,4,45,287,8,45,11,45,12,45,288,1,45,1,45,0,0,46,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,0,89,0,91,43,1,
        0,6,2,0,10,10,13,13,2,0,34,34,92,92,3,0,65,90,95,95,97,122,5,0,34,
        34,39,39,92,92,110,110,116,116,2,0,48,57,95,95,3,0,9,10,13,13,32,
        32,300,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,99,1,0,0,
        0,5,103,1,0,0,0,7,106,1,0,0,0,9,111,1,0,0,0,11,116,1,0,0,0,13,123,
        1,0,0,0,15,129,1,0,0,0,17,133,1,0,0,0,19,136,1,0,0,0,21,142,1,0,
        0,0,23,146,1,0,0,0,25,156,1,0,0,0,27,158,1,0,0,0,29,160,1,0,0,0,
        31,162,1,0,0,0,33,164,1,0,0,0,35,166,1,0,0,0,37,169,1,0,0,0,39,171,
        1,0,0,0,41,174,1,0,0,0,43,177,1,0,0,0,45,180,1,0,0,0,47,183,1,0,
        0,0,49,185,1,0,0,0,51,189,1,0,0,0,53,192,1,0,0,0,55,196,1,0,0,0,
        57,201,1,0,0,0,59,207,1,0,0,0,61,240,1,0,0,0,63,242,1,0,0,0,65,252,
        1,0,0,0,67,260,1,0,0,0,69,262,1,0,0,0,71,264,1,0,0,0,73,266,1,0,
        0,0,75,268,1,0,0,0,77,270,1,0,0,0,79,272,1,0,0,0,81,274,1,0,0,0,
        83,276,1,0,0,0,85,278,1,0,0,0,87,280,1,0,0,0,89,283,1,0,0,0,91,286,
        1,0,0,0,93,94,5,102,0,0,94,95,5,105,0,0,95,96,5,101,0,0,96,97,5,
        108,0,0,97,98,5,100,0,0,98,2,1,0,0,0,99,100,5,108,0,0,100,101,5,
        101,0,0,101,102,5,116,0,0,102,4,1,0,0,0,103,104,5,105,0,0,104,105,
        5,102,0,0,105,6,1,0,0,0,106,107,5,101,0,0,107,108,5,108,0,0,108,
        109,5,105,0,0,109,110,5,102,0,0,110,8,1,0,0,0,111,112,5,101,0,0,
        112,113,5,108,0,0,113,114,5,115,0,0,114,115,5,101,0,0,115,10,1,0,
        0,0,116,117,5,114,0,0,117,118,5,101,0,0,118,119,5,116,0,0,119,120,
        5,117,0,0,120,121,5,114,0,0,121,122,5,110,0,0,122,12,1,0,0,0,123,
        124,5,112,0,0,124,125,5,114,0,0,125,126,5,105,0,0,126,127,5,110,
        0,0,127,128,5,116,0,0,128,14,1,0,0,0,129,130,5,102,0,0,130,131,5,
        111,0,0,131,132,5,114,0,0,132,16,1,0,0,0,133,134,5,105,0,0,134,135,
        5,110,0,0,135,18,1,0,0,0,136,137,5,119,0,0,137,138,5,104,0,0,138,
        139,5,105,0,0,139,140,5,108,0,0,140,141,5,101,0,0,141,20,1,0,0,0,
        142,143,5,100,0,0,143,144,5,101,0,0,144,145,5,102,0,0,145,22,1,0,
        0,0,146,147,5,112,0,0,147,148,5,114,0,0,148,149,5,111,0,0,149,150,
        5,99,0,0,150,151,5,101,0,0,151,152,5,100,0,0,152,153,5,117,0,0,153,
        154,5,114,0,0,154,155,5,101,0,0,155,24,1,0,0,0,156,157,5,43,0,0,
        157,26,1,0,0,0,158,159,5,45,0,0,159,28,1,0,0,0,160,161,5,42,0,0,
        161,30,1,0,0,0,162,163,5,47,0,0,163,32,1,0,0,0,164,165,5,62,0,0,
        165,34,1,0,0,0,166,167,5,62,0,0,167,168,5,61,0,0,168,36,1,0,0,0,
        169,170,5,60,0,0,170,38,1,0,0,0,171,172,5,60,0,0,172,173,5,61,0,
        0,173,40,1,0,0,0,174,175,5,61,0,0,175,176,5,61,0,0,176,42,1,0,0,
        0,177,178,5,33,0,0,178,179,5,61,0,0,179,44,1,0,0,0,180,181,5,43,
        0,0,181,182,5,61,0,0,182,46,1,0,0,0,183,184,5,37,0,0,184,48,1,0,
        0,0,185,186,5,97,0,0,186,187,5,110,0,0,187,188,5,100,0,0,188,50,
        1,0,0,0,189,190,5,111,0,0,190,191,5,114,0,0,191,52,1,0,0,0,192,193,
        5,110,0,0,193,194,5,111,0,0,194,195,5,116,0,0,195,54,1,0,0,0,196,
        197,5,84,0,0,197,198,5,114,0,0,198,199,5,117,0,0,199,200,5,101,0,
        0,200,56,1,0,0,0,201,202,5,70,0,0,202,203,5,97,0,0,203,204,5,108,
        0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,58,1,0,0,0,207,208,5,
        47,0,0,208,209,5,47,0,0,209,213,1,0,0,0,210,212,8,0,0,0,211,210,
        1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,
        1,0,0,0,215,213,1,0,0,0,216,217,6,29,0,0,217,60,1,0,0,0,218,220,
        5,45,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,
        3,89,44,0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,
        1,0,0,0,225,241,1,0,0,0,226,228,5,45,0,0,227,226,1,0,0,0,227,228,
        1,0,0,0,228,230,1,0,0,0,229,231,3,89,44,0,230,229,1,0,0,0,231,232,
        1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,236,
        5,46,0,0,235,237,3,89,44,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,
        1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,219,1,0,0,0,240,227,
        1,0,0,0,241,62,1,0,0,0,242,247,5,34,0,0,243,246,3,87,43,0,244,246,
        8,1,0,0,245,243,1,0,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,251,
        5,34,0,0,251,64,1,0,0,0,252,257,3,85,42,0,253,256,3,85,42,0,254,
        256,3,89,44,0,255,253,1,0,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,
        255,1,0,0,0,257,258,1,0,0,0,258,66,1,0,0,0,259,257,1,0,0,0,260,261,
        5,40,0,0,261,68,1,0,0,0,262,263,5,41,0,0,263,70,1,0,0,0,264,265,
        5,91,0,0,265,72,1,0,0,0,266,267,5,93,0,0,267,74,1,0,0,0,268,269,
        5,123,0,0,269,76,1,0,0,0,270,271,5,125,0,0,271,78,1,0,0,0,272,273,
        5,44,0,0,273,80,1,0,0,0,274,275,5,46,0,0,275,82,1,0,0,0,276,277,
        5,61,0,0,277,84,1,0,0,0,278,279,7,2,0,0,279,86,1,0,0,0,280,281,5,
        92,0,0,281,282,7,3,0,0,282,88,1,0,0,0,283,284,7,4,0,0,284,90,1,0,
        0,0,285,287,7,5,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,
        0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,6,45,0,0,291,92,1,0,
        0,0,13,0,213,219,224,227,232,238,240,245,247,255,257,288,1,6,0,0
    ]

class RogueLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IF = 3
    ELIF = 4
    ELSE = 5
    RETURN = 6
    PRINT = 7
    FOR = 8
    IN = 9
    WHILE = 10
    DEF = 11
    PROCEDURE = 12
    PLUS = 13
    MINUS = 14
    MULT = 15
    DIV = 16
    GT = 17
    GTE = 18
    LT = 19
    LTE = 20
    EQ = 21
    NEQ = 22
    PEQ = 23
    MOD = 24
    AND = 25
    OR = 26
    NOT = 27
    TRUE = 28
    FALSE = 29
    COMMENT_SINGLELINE = 30
    NUMBER = 31
    STRING = 32
    ID = 33
    OPEN_PARENTH = 34
    CLOSED_PARENTH = 35
    OPEN_BRACK = 36
    CLOSED_BRACK = 37
    OPEN_CURL = 38
    CLOSED_CURL = 39
    COMMA = 40
    DOT = 41
    EQUAL_SIGN = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'field'", "'let'", "'if'", "'elif'", "'else'", "'return'", 
            "'print'", "'for'", "'in'", "'while'", "'def'", "'procedure'", 
            "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", 
            "'!='", "'+='", "'%'", "'and'", "'or'", "'not'", "'True'", "'False'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "RETURN", "PRINT", "FOR", "IN", "WHILE", 
            "DEF", "PROCEDURE", "PLUS", "MINUS", "MULT", "DIV", "GT", "GTE", 
            "LT", "LTE", "EQ", "NEQ", "PEQ", "MOD", "AND", "OR", "NOT", 
            "TRUE", "FALSE", "COMMENT_SINGLELINE", "NUMBER", "STRING", "ID", 
            "OPEN_PARENTH", "CLOSED_PARENTH", "OPEN_BRACK", "CLOSED_BRACK", 
            "OPEN_CURL", "CLOSED_CURL", "COMMA", "DOT", "EQUAL_SIGN", "WS" ]

    ruleNames = [ "T__0", "T__1", "IF", "ELIF", "ELSE", "RETURN", "PRINT", 
                  "FOR", "IN", "WHILE", "DEF", "PROCEDURE", "PLUS", "MINUS", 
                  "MULT", "DIV", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", 
                  "PEQ", "MOD", "AND", "OR", "NOT", "TRUE", "FALSE", "COMMENT_SINGLELINE", 
                  "NUMBER", "STRING", "ID", "OPEN_PARENTH", "CLOSED_PARENTH", 
                  "OPEN_BRACK", "CLOSED_BRACK", "OPEN_CURL", "CLOSED_CURL", 
                  "COMMA", "DOT", "EQUAL_SIGN", "LETTER", "ESC", "NUMB", 
                  "WS" ]

    grammarFileName = "RogueLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


